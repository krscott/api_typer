use api_typer::{self, ApiSpec};
use polymorphio::{FileOrStdin, FileOrStdout};
use std::{error::Error, path::PathBuf, process::exit};
use structopt::StructOpt;

#[derive(Debug, StructOpt)]
struct Opt {
    #[structopt(short, long, help = "Silence all log messages")]
    quiet: bool,

    #[structopt(short, long, parse(from_occurrences), help = "Increase log output")]
    verbose: usize,

    #[structopt(parse(from_os_str), default_value = "-", help = "Input file")]
    input: PathBuf,

    #[structopt(short, long, parse(from_os_str), help = "Output Elm File")]
    elm: Option<PathBuf>,

    #[structopt(short, long, parse(from_os_str), help = "Output Rust File")]
    rust: Option<PathBuf>,

    #[structopt(short, long, parse(from_os_str), help = "Output TypeScript File")]
    typescript: Option<PathBuf>,
}

fn app(opt: Opt) -> Result<(), Box<dyn Error>> {
    log::debug!("Reading input yml: {:?}", opt.input);
    let mut input_file = FileOrStdin::from_path(&opt.input)?;

    log::debug!("Parsing yml");
    let spec: ApiSpec = serde_yaml::from_reader(input_file.lock())?;

    if let Some(elm_path) = &opt.elm {
        log::debug!("Generating Elm: {:?}", elm_path);
        let elm_str = format!(
            "-- Auto-generated by api_typer\n\n{}\n",
            api_typer::to_elm(&spec)
        );
        FileOrStdout::write_all(elm_path, elm_str.as_bytes())?;
    }

    if let Some(rust_path) = &opt.rust {
        log::debug!("Generating Rust: {:?}", rust_path);
        let rust_str = format!(
            "// Auto-generated by api_typer\n\n{}\n",
            api_typer::to_rust(&spec)
        );
        FileOrStdout::write_all(rust_path, rust_str.as_bytes())?;
    }

    if let Some(ts_path) = &opt.typescript {
        log::debug!("Generating Typescript: {:?}", ts_path);
        let typescript_str = format!(
            "// Auto-generated by api_typer\n\n{}\n",
            api_typer::to_typescript(&spec)
        );
        FileOrStdout::write_all(ts_path, typescript_str.as_bytes())?;
    }

    Ok(())
}

fn main() {
    let opt = Opt::from_args();

    stderrlog::new()
        .module(module_path!())
        .quiet(opt.quiet)
        .verbosity(opt.verbose + 1)
        .init()
        .unwrap();

    match app(opt) {
        Ok(()) => {}
        Err(e) => {
            log::error!("Program exited: {}", e);
            exit(1);
        }
    }
}
